datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider         = "zod-prisma-types"
  output           = "../src/zod"
  createInputTypes = false
  addIncludeType   = false
  addSelectType    = false
}

enum UserRole {
  USER
  ADMIN
  SUPERADMIN
}

model User {
  id                 String                  @id @default(cuid())
  email              String                  @unique
  emailVerified      Boolean                 @default(false)
  role               UserRole                @default(USER)
  name               String?
  avatarUrl          String?
  createdAt          DateTime                @default(now())
  hashedPassword     String?
  onboardingComplete Boolean                 @default(false)
  oauthAccounts      UserOauthAccount[]
  sessions           UserSession[]
  memberships        TeamMembership[]
  verificationtokens UserVerificationToken[]
  oneTimePasswords   UserOneTimePassword[]
}

model UserSession {
  id             String   @id
  userId         String
  expiresAt      DateTime
  impersonatorId String?
  user           User     @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@index([userId])
}

model UserOauthAccount {
  id             String @id @default(cuid())
  providerId     String
  providerUserId String
  userId         String
  user           User   @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@unique([providerId, providerUserId])
}

model UserVerificationToken {
  id      String   @id @default(cuid())
  userId  String
  user    User     @relation(references: [id], fields: [userId], onDelete: Cascade)
  expires DateTime

  @@index([userId])
}

enum UserOneTimePasswordType {
  SIGNUP
  LOGIN
  PASSWORD_RESET
}

model UserOneTimePassword {
  id         String                  @id @default(cuid())
  userId     String
  user       User                    @relation(references: [id], fields: [userId], onDelete: Cascade)
  code       String
  type       UserOneTimePasswordType
  identifier String
  expires    DateTime
}

model Team {
  id           String           @id @default(cuid())
  name         String
  avatarUrl    String?
  memberships  TeamMembership[]
  subscription Subscription?
  invitations  TeamInvitation[]
  Properties   Properties?
  Tickets      Tickets[]
}

enum TeamMemberRole {
  MEMBER
  OWNER
}

model TeamMembership {
  id        String         @id @default(cuid())
  team      Team           @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  role      TeamMemberRole @default(MEMBER)
  isCreator Boolean        @default(false)

  @@unique([teamId, userId])
}

model TeamInvitation {
  id        String         @id @default(cuid())
  team      Team           @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String
  email     String
  role      TeamMemberRole @default(MEMBER)
  createdAt DateTime       @default(now())
  expiresAt DateTime       @updatedAt

  @@unique([teamId, email])
}

enum SubscriptionStatus {
  TRIALING
  ACTIVE
  PAUSED
  CANCELED
  PAST_DUE
  UNPAID
  INCOMPLETE
  EXPIRED
}

model Subscription {
  id              String             @id
  team            Team               @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId          String             @unique
  customerId      String
  status          SubscriptionStatus
  planId          String
  variantId       String
  nextPaymentDate DateTime?
}

model Address {
  id                String       @id @default(cuid())
  UPRN              String
  line1             String
  line2             String
  line3             String
  line4             String
  locality          String
  townOrCity        String
  county            String
  district          String
  country           String
  formattedAddress  String[]
  postcode          String
  latitude          Float
  longitude         Float
  thoroughfare      String
  buildingName      String
  subBuildingName   String
  subBuildingNumber String
  buildingNumber    String
  Properties        Properties[]
  Contacts          Contacts[]
  Tenants           Tenants[]
}

model Properties {
  id        String       @id @default(cuid())
  team      Team         @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String       @unique
  address   Address      @relation(fields: [addressId], references: [id])
  addressId String
  type      PropertyType
  rooms     Int
  size      Float
  Tenancy   Tenancy[]
  Tickets   Tickets[]
}

enum PropertyType {
  HOUSE
  FLAT
  APARTMENT
  BUNGALOW
  BOAT
  BASEMENT
  ROOM
  MAISONETTE
}

model Contacts {
  id                 String   @id @default(cuid())
  title              Title
  firstName          String
  lastName           String
  middleNames        String
  dateOfBirth        DateTime
  email              String
  primaryContactNo   String
  secondaryContactNo String
  address            Address  @relation(fields: [addressId], references: [id])
  addressId          String
  status             Status
}

enum Title {
  MR
  MRS
  MS
}

enum TenantType {
  COMPANY
  INDIVIDUAL
}

model Tenants {
  id                 String     @id @default(cuid())
  type               TenantType
  companyName        String
  title              Title
  firstName          String
  lastName           String
  middleNames        String
  dateOfBirth        DateTime
  email              String
  primaryContactNo   String
  secondaryContactNo String
  address            Address    @relation(fields: [addressId], references: [id])
  addressId          String
  status             Status
  placeOfBirth       String
  NINumber           String
  Tenancy            Tenancy[]
  Tickets            Tickets[]
}

enum Status {
  ACTIVE
  ARCHIVED
}

model Tenancy {
  id         String      @id @default(cuid())
  property   Properties  @relation(fields: [propertyId], references: [id])
  propertyId String
  tenant     Tenants     @relation(fields: [tenantId], references: [id])
  tenantId   String
  startDate  DateTime
  endDate    DateTime
  type       TenancyType
  Tickets    Tickets[]
}

enum TenancyType {
  ASSURED
  ASSURED_SHORTHOLD
  SECURE
  LICENSE_TO_OCCUPY
  DEMOTED
  INTRODUCTORY
  COMPANY_LET
  NON_ASSURED
  EXCLUDED_TENANCY
  REGULATED_TENANCY
}

model Tickets {
  id                String     @id @default(cuid())
  referenceNo       String
  property          Properties @relation(fields: [propertyId], references: [id])
  propertyId        String
  team              Team       @relation(fields: [teamId], references: [id])
  teamId            String
  reporterName      String
  reporterEmail     String
  reporterContactNo String
  matchedTenant     Tenants    @relation(fields: [tenantId], references: [id])
  tenantId          String
  matchedTenancy    Tenancy    @relation(fields: [tenancyId], references: [id])
  tenancyId         String
  Issues            Issues[]
}

model Issues {
  id          String  @id @default(cuid())
  referenceNo String
  ticket      Tickets @relation(fields: [ticketId], references: [id])
  ticketId    String
}
